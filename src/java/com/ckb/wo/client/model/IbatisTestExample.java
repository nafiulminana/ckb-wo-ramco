package com.ckb.wo.client.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IbatisTestExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	protected List<Criteria> oredCriteria;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	protected String limitClause;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public IbatisTestExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	protected IbatisTestExample(IbatisTestExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
		this.limitClause = example.limitClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public void setLimitClause(String limitClause) {
		this.limitClause = limitClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public String getLimitClause() {
		return limitClause;
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table ibatistest
	 * @ibatorgenerated  Tue Jun 29 17:37:52 SGT 2010
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andBigtestIsNull() {
			addCriterion("bigtest is null");
			return this;
		}

		public Criteria andBigtestIsNotNull() {
			addCriterion("bigtest is not null");
			return this;
		}

		public Criteria andBigtestEqualTo(Long value) {
			addCriterion("bigtest =", value, "bigtest");
			return this;
		}

		public Criteria andBigtestNotEqualTo(Long value) {
			addCriterion("bigtest <>", value, "bigtest");
			return this;
		}

		public Criteria andBigtestGreaterThan(Long value) {
			addCriterion("bigtest >", value, "bigtest");
			return this;
		}

		public Criteria andBigtestGreaterThanOrEqualTo(Long value) {
			addCriterion("bigtest >=", value, "bigtest");
			return this;
		}

		public Criteria andBigtestLessThan(Long value) {
			addCriterion("bigtest <", value, "bigtest");
			return this;
		}

		public Criteria andBigtestLessThanOrEqualTo(Long value) {
			addCriterion("bigtest <=", value, "bigtest");
			return this;
		}

		public Criteria andBigtestIn(List<Long> values) {
			addCriterion("bigtest in", values, "bigtest");
			return this;
		}

		public Criteria andBigtestNotIn(List<Long> values) {
			addCriterion("bigtest not in", values, "bigtest");
			return this;
		}

		public Criteria andBigtestBetween(Long value1, Long value2) {
			addCriterion("bigtest between", value1, value2, "bigtest");
			return this;
		}

		public Criteria andBigtestNotBetween(Long value1, Long value2) {
			addCriterion("bigtest not between", value1, value2, "bigtest");
			return this;
		}

		public Criteria andInttestIsNull() {
			addCriterion("inttest is null");
			return this;
		}

		public Criteria andInttestIsNotNull() {
			addCriterion("inttest is not null");
			return this;
		}

		public Criteria andInttestEqualTo(Long value) {
			addCriterion("inttest =", value, "inttest");
			return this;
		}

		public Criteria andInttestNotEqualTo(Long value) {
			addCriterion("inttest <>", value, "inttest");
			return this;
		}

		public Criteria andInttestGreaterThan(Long value) {
			addCriterion("inttest >", value, "inttest");
			return this;
		}

		public Criteria andInttestGreaterThanOrEqualTo(Long value) {
			addCriterion("inttest >=", value, "inttest");
			return this;
		}

		public Criteria andInttestLessThan(Long value) {
			addCriterion("inttest <", value, "inttest");
			return this;
		}

		public Criteria andInttestLessThanOrEqualTo(Long value) {
			addCriterion("inttest <=", value, "inttest");
			return this;
		}

		public Criteria andInttestIn(List<Long> values) {
			addCriterion("inttest in", values, "inttest");
			return this;
		}

		public Criteria andInttestNotIn(List<Long> values) {
			addCriterion("inttest not in", values, "inttest");
			return this;
		}

		public Criteria andInttestBetween(Long value1, Long value2) {
			addCriterion("inttest between", value1, value2, "inttest");
			return this;
		}

		public Criteria andInttestNotBetween(Long value1, Long value2) {
			addCriterion("inttest not between", value1, value2, "inttest");
			return this;
		}

		public Criteria andBigunsignedIsNull() {
			addCriterion("bigunsigned is null");
			return this;
		}

		public Criteria andBigunsignedIsNotNull() {
			addCriterion("bigunsigned is not null");
			return this;
		}

		public Criteria andBigunsignedEqualTo(Long value) {
			addCriterion("bigunsigned =", value, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedNotEqualTo(Long value) {
			addCriterion("bigunsigned <>", value, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedGreaterThan(Long value) {
			addCriterion("bigunsigned >", value, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedGreaterThanOrEqualTo(Long value) {
			addCriterion("bigunsigned >=", value, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedLessThan(Long value) {
			addCriterion("bigunsigned <", value, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedLessThanOrEqualTo(Long value) {
			addCriterion("bigunsigned <=", value, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedIn(List<Long> values) {
			addCriterion("bigunsigned in", values, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedNotIn(List<Long> values) {
			addCriterion("bigunsigned not in", values, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedBetween(Long value1, Long value2) {
			addCriterion("bigunsigned between", value1, value2, "bigunsigned");
			return this;
		}

		public Criteria andBigunsignedNotBetween(Long value1, Long value2) {
			addCriterion("bigunsigned not between", value1, value2,
					"bigunsigned");
			return this;
		}
	}
}