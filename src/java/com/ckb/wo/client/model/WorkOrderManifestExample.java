package com.ckb.wo.client.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkOrderManifestExample {

    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds
     * to the database table tworkorder_manifest
     *
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds
     * to the database table tworkorder_manifest
     *
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds
     * to the database table tworkorder_manifest
     *
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    protected String limitClause;

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public WorkOrderManifestExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @param example
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    protected WorkOrderManifestExample(WorkOrderManifestExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.limitClause = example.limitClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @param orderByClause
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @return
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @return
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @param criteria
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @return
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.isEmpty()) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @return
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @param limitClause
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public void setLimitClause(String limitClause) {
        this.limitClause = limitClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method
     * corresponds to the database table tworkorder_manifest
     *
     * @return
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public String getLimitClause() {
        return limitClause;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds
     * to the database table tworkorder_manifest
     *
     * @ibatorgenerated Mon Jul 05 17:58:15 SGT 2010
     */
    public static class Criteria {

        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<>();
            criteriaWithSingleValue = new ArrayList<>();
            criteriaWithListValue = new ArrayList<>();
            criteriaWithBetweenValue = new ArrayList<>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                    || criteriaWithSingleValue.size() > 0
                    || criteriaWithListValue.size() > 0
                    || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.isEmpty()) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andTworkorderManifestPkIsNull() {
            addCriterion("tworkorder_manifest_pk is null");
            return this;
        }

        public Criteria andTworkorderManifestPkIsNotNull() {
            addCriterion("tworkorder_manifest_pk is not null");
            return this;
        }

        public Criteria andTworkorderManifestPkEqualTo(Long value) {
            addCriterion("tworkorder_manifest_pk =", value, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkNotEqualTo(Long value) {
            addCriterion("tworkorder_manifest_pk <>", value, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkGreaterThan(Long value) {
            addCriterion("tworkorder_manifest_pk >", value, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkGreaterThanOrEqualTo(Long value) {
            addCriterion("tworkorder_manifest_pk >=", value, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkLessThan(Long value) {
            addCriterion("tworkorder_manifest_pk <", value, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkLessThanOrEqualTo(Long value) {
            addCriterion("tworkorder_manifest_pk <=", value, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkIn(List<Long> values) {
            addCriterion("tworkorder_manifest_pk in", values, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkNotIn(List<Long> values) {
            addCriterion("tworkorder_manifest_pk not in", values, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkBetween(Long value1, Long value2) {
            addCriterion("tworkorder_manifest_pk between", value1, value2, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderManifestPkNotBetween(Long value1, Long value2) {
            addCriterion("tworkorder_manifest_pk not between", value1, value2, "tworkorderManifestPk");
            return this;
        }

        public Criteria andTworkorderFkIsNull() {
            addCriterion("tworkorder_fk is null");
            return this;
        }

        public Criteria andTworkorderFkIsNotNull() {
            addCriterion("tworkorder_fk is not null");
            return this;
        }

        public Criteria andTworkorderFkEqualTo(Long value) {
            addCriterion("tworkorder_fk =", value, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkNotEqualTo(Long value) {
            addCriterion("tworkorder_fk <>", value, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkGreaterThan(Long value) {
            addCriterion("tworkorder_fk >", value, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkGreaterThanOrEqualTo(Long value) {
            addCriterion("tworkorder_fk >=", value, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkLessThan(Long value) {
            addCriterion("tworkorder_fk <", value, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkLessThanOrEqualTo(Long value) {
            addCriterion("tworkorder_fk <=", value, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkIn(List<Long> values) {
            addCriterion("tworkorder_fk in", values, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkNotIn(List<Long> values) {
            addCriterion("tworkorder_fk not in", values, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkBetween(Long value1, Long value2) {
            addCriterion("tworkorder_fk between", value1, value2, "tworkorderFk");
            return this;
        }

        public Criteria andTworkorderFkNotBetween(Long value1, Long value2) {
            addCriterion("tworkorder_fk not between", value1, value2, "tworkorderFk");
            return this;
        }

        public Criteria andManifestNoIsNull() {
            addCriterion("manifest_no is null");
            return this;
        }

        public Criteria andManifestNoIsNotNull() {
            addCriterion("manifest_no is not null");
            return this;
        }

        public Criteria andManifestNoEqualTo(Long value) {
            addCriterion("manifest_no =", value, "manifestNo");
            return this;
        }

        public Criteria andManifestNoNotEqualTo(Long value) {
            addCriterion("manifest_no <>", value, "manifestNo");
            return this;
        }

        public Criteria andManifestNoGreaterThan(Long value) {
            addCriterion("manifest_no >", value, "manifestNo");
            return this;
        }

        public Criteria andManifestNoGreaterThanOrEqualTo(Long value) {
            addCriterion("manifest_no >=", value, "manifestNo");
            return this;
        }

        public Criteria andManifestNoLessThan(Long value) {
            addCriterion("manifest_no <", value, "manifestNo");
            return this;
        }

        public Criteria andManifestNoLessThanOrEqualTo(Long value) {
            addCriterion("manifest_no <=", value, "manifestNo");
            return this;
        }

        public Criteria andManifestNoIn(List<Long> values) {
            addCriterion("manifest_no in", values, "manifestNo");
            return this;
        }

        public Criteria andManifestNoNotIn(List<Long> values) {
            addCriterion("manifest_no not in", values, "manifestNo");
            return this;
        }

        public Criteria andManifestNoBetween(Long value1, Long value2) {
            addCriterion("manifest_no between", value1, value2, "manifestNo");
            return this;
        }

        public Criteria andManifestNoNotBetween(Long value1, Long value2) {
            addCriterion("manifest_no not between", value1, value2, "manifestNo");
            return this;
        }
    }
}
